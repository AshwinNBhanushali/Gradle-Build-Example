buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.+'
    }
}
apply plugin: 'android'

repositories {
    mavenCentral()
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.0.1"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 18
    }


    productFlavors {
        free {
            packageName "com.gradle.build.example.free"
        }

        paid {
            packageName "com.gradle.build.example.paid"
        }
    }

    buildTypes {
        debug {

        }

        alpha.initWith(buildTypes.debug)
        alpha {
            packageNameSuffix ".alpha"
        }

        beta.initWith(buildTypes.debug)
        beta {
            packageNameSuffix ".beta"
        }
    }

    sourceSets {
        alpha {
            res.srcDirs 'src/unique_overrides/res'
        }

        beta {
            res.srcDirs 'src/unique_overrides/res'
        }

        release {
            res.srcDirs 'src/unique_overrides/res'
        }

        signingConfigs {
            debug {
                storeFile file("debug.keystore")
            }
        }
    }

}

// Selects the correct Google Maps v2 API key for the given applicationPackageName/signingKey pair and
// writes it to a resource file. This overrides the default from src/main, which the AndroidManifest
// picks up in the maps key meta-data tag.
// See: https://developers.google.com/maps/documentation/android/start#the_google_maps_api_key
//
// UPDATE: You can actually specify a set of packageName/signing-key pairs for a given Google Maps v2 API
// key. In lieu of this fact, I would recommend updating your Google Maps v2 key to support any new
// packageName/signing-key pair you introduce. The example remains, however, for other components that
// may benefit this strategy.
def overrideMapsKey(buildVariant) {
    def mapsKeyDictionary
    // The following code operates on the assumption that release builds are built using your
    // release keystore and all other builds are built using your debug keystore
    if (buildVariant.buildType.name == "release") {
        mapsKeyDictionary = ["com.gradle.build.example.free" : "free_release_key",
                                "com.gradle.build.example.paid" : "paid_release_key"]
    }
    else {
        mapsKeyDictionary = ["com.gradle.build.example.free" : "free_debug_key",
                                "com.gradle.build.example.free.alpha" : "free_alpha_debug_key",
                                "com.gradle.build.example.free.beta" : "free_beta_debug_key",
                                "com.gradle.build.example.paid" : "paid_debug_key",
                                "com.gradle.build.example.paid.alpha" : "paid_alpha_debug_key",
                                "com.gradle.build.example.paid.beta" : "paid_beta_debug_key"]
    }

    def packageName = getPackageName(buildVariant)
    def key = mapsKeyDictionary[getPackageName(buildVariant)]
    def mapKeyOverrideText = """<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="maps_key">$key</string>
</resources>"""

    createOverrideDirIfNecesarry()
    def file = new File("GradleBuildExample/src/unique_overrides/res/values/maps_key_override.xml")
    file.write(mapKeyOverrideText)
}

// This generates unique content provider authorities such that each buildVariant can be installed
// alongside eachother without the dreaded "INSTALL_FAILED_CONFLICTING_PROVIDER" fail message.
def overrideContentProviderAuthority(buildVariant) {
    def xmlStringsFileAsNode = new XmlParser().parse("GradleBuildExample/src/main/res/values/gradle_content_provider_strings.xml")
    def uniqueSuffix = "." + buildVariant.productFlavors.get(0).name + "." + buildVariant.buildType.name

    // Loop through each ContentProvider authority string resource in the file and append a unique suffix
    xmlStringsFileAsNode.each {
        it.setValue(it.text() + uniqueSuffix)
    }

    createOverrideDirIfNecesarry()
    def fileWriter = new FileWriter("GradleBuildExample/src/unique_overrides/res/values/gradle_content_provider_strings_overrides.xml")
    def printWriter = new PrintWriter(fileWriter)
    printWriter.print("""<?xml version="1.0" encoding="utf-8"?>\n""")
    def xmlPrinter = new XmlNodePrinter(printWriter)
    xmlPrinter.setPreserveWhitespace(true)
    xmlPrinter.print(xmlStringsFileAsNode)
}

def createOverrideDirIfNecesarry() {
    def file = new File("GradleBuildExample/src/unique_overrides/res/values/")
    if (!file.exists()) {
        file.mkdirs()
    }
}

// Return the packageName for the given buildVariant
def getPackageName(variant) {
    def suffix = variant.buildType.packageNameSuffix
    def packageName = variant.productFlavors.get(0).packageName
    if (suffix != null && !suffix.isEmpty() && suffix != "null") {
        packageName += suffix
    }
    return packageName
}

android.applicationVariants.all { variant ->
    variant.mergeResources.dependsOn {
        overrideMapsKey(variant)
        overrideContentProviderAuthority(variant)
    }
}